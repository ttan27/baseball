library(shiny)
library(tidyverse)
library(shinydashboard)
library(rvest)
install.packages("shiny")
install.packages(c("tidyverse", "shinydashboard", "shinydashboardPlus.", "dplyr", "ggplot2.", "rvest"))
install.packages("ggplot2")
library(shiny)
library(tidyverse)
library(shinydashboard)
library(rvest)
x <- read_html(https://www.baseball-reference.com/leagues/MLB-standings.shtml)
x <- read_html("https://www.baseball-reference.com/leagues/MLB-standings.shtml")
xtable <- html_table("https://www.baseball-reference.com/leagues/MLB-standings.shtml")
library(xml2)
xtable <- readHTMLTable("https://www.baseball-reference.com/leagues/MLB-standings.shtml")
install.packages("XML")
library(xml)
library(XML)
xtable <- readHTMLTable("https://www.baseball-reference.com/leagues/MLB-standings.shtml")
source('~/.active-rstudio-document', echo=TRUE)
xtable <- html_table(x)
getStandings <- function(){
standings <- html_table(read_html("https://www.baseball-reference.com/leagues/MLB-standings.shtml"))
}
getStandings <- function(){
standings <- html_table(read_html("https://www.baseball-reference.com/leagues/MLB-standings.shtml"))
ALE <- standings[1]
ALC <- standings[2]
ALW <- standings[3]
NLE <- standings[4]
NLC <- standings[5]
NLW <- standings[6]
}
getStandings <- function(){
standings <- html_table(read_html("https://www.baseball-reference.com/leagues/MLB-standings.shtml"))
ALE <- standings[1]
ALC <- standings[2]
ALW <- standings[3]
NLE <- standings[4]
NLC <- standings[5]
NLW <- standings[6]
standings
}
getStandings()
getStandings <- function(){
standings <- html_table(read_html("https://www.baseball-reference.com/leagues/MLB-standings.shtml"))
names(standings) <- ('AL East', 'AL Central', 'AL West', 'NL East', 'NL Central', 'NL West')
standings
}
getStandings()
standings <- html_table(read_html("https://www.baseball-reference.com/leagues/MLB-standings.shtml"))
names(standings) <- ('AL East', 'AL Central', 'AL West', 'NL East', 'NL Central', 'NL West')
getStandings <- function(){
standings <- html_table(read_html("https://www.baseball-reference.com/leagues/MLB-standings.shtml"))
names(standings) <- c('AL East', 'AL Central', 'AL West', 'NL East', 'NL Central', 'NL West')
standings
}
getStandings()
source('~/.active-rstudio-document', echo=TRUE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
standings <- html_table(read_html("https://www.baseball-reference.com/leagues/MLB-standings.shtml"))
names(standings) <- c('AL East', 'AL Central', 'AL West', 'NL East', 'NL Central', 'NL West')
standings
standings[i]
standings[1]
ale <- standings[1]
View(ale)
ale <- as.data.frame(standings[1])
View(ale)
ale <- data.frame(standings[1])
ale <- data.frame(standings[1])
ale
ale <- as.data.frame(standings[1],col.names = names(x))
ale <- as.data.frame(standings[1],col.names = names(standings[1]))
ale <- as.data.frame(standings[1],col.names = c('Tm', 'W', 'L', 'W.L', 'GB'))
ale <- as.data.frame(standings[1],col.names = c('Tm', 'W', 'L', 'W.L', 'GB'))
runApp()
runApp()
runApp()
standings[1]
ale <- standings[1]
ale <- as.data.frame(standings[1],col.names = c('Tm', 'W', 'L', 'W.L', 'GB'))
names(ale) = c('Tm', 'W', 'L', 'W.L', 'GB'))
ale <- as.data.frame(standings[1])
names(ale) = c('Tm', 'W', 'L', 'W.L', 'GB')
runApp()
runApp()
alBatLeaders <- html_table(read_html("https://www.baseball-reference.com/leagues/AL/2018-batting-leaders.shtml"))
install.packages("RSelenium")
checkForServer()
startServer()
remDr <- remoteDriver()
remDr$open()
#navigate to your page
remDr$navigate("https://www.baseball-reference.com/leagues/MLB/2018-standard-batting.shtml")
#scroll down 5 times, waiting for the page to load at each time
for(i in 1:5){
remDr$executeScript(paste("scroll(0,",i*10000,");"))
Sys.sleep(3)
}
library(RSelenium)
checkForServer()
startServer()
remDr <- remoteDriver()
remDr$open()
#navigate to your page
remDr$navigate("https://www.baseball-reference.com/leagues/MLB/2018-standard-batting.shtml")
#scroll down 5 times, waiting for the page to load at each time
for(i in 1:5){
remDr$executeScript(paste("scroll(0,",i*10000,");"))
Sys.sleep(3)
}
library(devtools)
install_version("binman", version = "0.1.0", repos = "https://cran.uni-muenster.de/")
install_version("wdman", version = "0.2.2", repos = "https://cran.uni-muenster.de/")
install_version("RSelenium", version = "1.7.1", repos = "https://cran.uni-muenster.de/")
install.packages("devtools")
library(devtools)
install_version("binman", version = "0.1.0", repos = "https://cran.uni-muenster.de/")
install_version("wdman", version = "0.2.2", repos = "https://cran.uni-muenster.de/")
install_version("RSelenium", version = "1.7.1", repos = "https://cran.uni-muenster.de/")
checkForServer()
startServer()
remDr <- remoteDriver()
remDr$open()
#navigate to your page
remDr$navigate("https://www.baseball-reference.com/leagues/MLB/2018-standard-batting.shtml")
#scroll down 5 times, waiting for the page to load at each time
for(i in 1:5){
remDr$executeScript(paste("scroll(0,",i*10000,");"))
Sys.sleep(3)
}
library(RSelenium)
checkForServer()
startServer()
remDr <- remoteDriver()
remDr$open()
#navigate to your page
remDr$navigate("https://www.baseball-reference.com/leagues/MLB/2018-standard-batting.shtml")
#scroll down 5 times, waiting for the page to load at each time
for(i in 1:5){
remDr$executeScript(paste("scroll(0,",i*10000,");"))
Sys.sleep(3)
}
install.packages("baseballr")
devtools::install_github("BillPetti/baseballr")
library(baseballr)
team_results_bref("SEA", 1995)
sea <- team_results_bref("SEA", 1995)
View(sea)
shiny::runApp()
sea <- team_results_bref("SEA", 2018)
View(sea)
teams <- html_table(read_html("https://www.baseball-reference.com/about/team_IDs.shtml"))
teams <- teams[1]
teams <- as.data.frame(teams[1])
teams <- header.true(teams)
header.true <- function(df) {
names(df) <- as.character(unlist(df[1,]))
df[-1,]
}
teams <- html_table(read_html("https://www.baseball-reference.com/about/team_IDs.shtml"))
teams <- as.data.frame(teams[1])
teams <- header.true(teams)
teams <- teams[,teams$`Last Year` == 'Present']
# making present teams only
teams <- teams[,`Last Year` == 'Present']
# making present teams only
teams <- teams[,teams$`Last Year` == 'Present']
teams <- filter(teams, `Last Year` == 'Present')
runApp()
runApp()
runApp()
View(teams)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
a <- c(1:getTeams()[getTeams()$`First Year`=='Sea', 4]))
a <- c(1:getTeams()[getTeams()$`First Year`=='Sea', 4])
a <- c(1:getTeams()[getTeams()$`First Year`=='SEA', 4])
b <- getTeams()$`First Year`
b <- getTeams()[getTeams()$`First Year` == 'SEA']
View(b)
a <- c(1:getTeams()[getTeams()$`TEAM ID`=='SEA', 4])
b <- getTeams()[getTeams()$`TEAM ID` == 'SEA']
b <- getTeams()[getTeams()$`Team ID` == 'SEA']
b <- getTeams()[getTeams()$`Team ID` == 'SEA',]
View(b)
b <- getTeams()[getTeams()$`Team ID` == 'SEA',4]
c(1:getTeams()[getTeams()$`Team ID` == 'SEA',4])
c(2018:getTeams()[getTeams()$`Team ID` == 'SEA',4])
runApp()
runApp()
sea <- getTeamDetail("SEA", 2018)
runApp()
runApp()
runApp()
runApp()
sea <- fg_bat_leaders(2018, 2018, league = 'al')
View(sea)
getLeagueLeaders <- function(league, year, stat){
statDB <- fg_bat_leaders(year, year, league)
}
return()
return(statTable)
runApp()
getLeagueLeaders('al', 2018, 'HR')
statTable <- order_by(statDB[,c('Name', 'Team', stat)], stat)
getLeagueLeaders <- function(league, year, stat){
statDB <- fg_bat_leaders(year, year, league)
statTable <- order_by(statDB[,c('Name', 'Team', stat)], stat)
return(statTable)
}
getLeagueLeaders('al', 2018, 'HR')
getLeagueLeaders <- function(league, year, stat){
statDB <- fg_bat_leaders(year, year, league)
statDB <- arrange(statDB, desc(stat))
statTable <- statDB[1:10,c('Name', 'Team', stat)]
return(statTable)
}
getLeagueLeaders('al', 2018, 'HR')
getLeagueLeaders <- function(league, year, stat){
statDB <- fg_bat_leaders(year, year, league)
statDB <- arrange(statDB, desc(stat))
statTable <- statDB[1:10,c('Name', 'Team', stat)]
return(statDB)
}
getLeagueLeaders('al', 2018, 'HR')
statDB <- fg_bat_leaders(year, year, league)
statDB <- arrange(statDB, desc(stat))
statDB <- fg_bat_leaders(2018, 2018, 'al')
statDB <- arrange(statDB, desc(stat))
statDB <- arrange(as.data.frame(statDB), desc(stat))
statDB <- arrange(statDB, desc('HR'))
statDB <- arrange(statDB, desc(HR))
statDB <- fg_bat_leaders(2018, 2018, 'al')
statDB <- arrange(statDB, desc(!!as.name('HR')))
getLeagueLeaders <- function(league, year, stat){
statDB <- fg_bat_leaders(year, year, league)
statDB <- arrange(statDB, desc(!!as.name(stat)))
statTable <- statDB[1:10,c('Name', 'Team', stat)]
return(statDB)
}
getLeagueLeaders('al', 2018, 'HR')
getLeagueLeaders <- function(league, year, stat){
statDB <- fg_bat_leaders(year, year, league)
statDB <- arrange(statDB, desc(!!as.name(stat)))
statTable <- statDB[1:10,c('Name', 'Team', stat)]
return(statTable)
}
getLeagueLeaders('al', 2018, 'HR')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
statDB <- fg_bat_leaders(2018, 2018, 'al')
statDB <- arrange(statDB, desc(!!as.name('HR')))
statDB <- filter(statDB, Team = 'Mariners')
statDB <- filter(statDB, Team == 'Mariners')
View(statDB)
url <- "https://www.baseball-reference.com/teams/SEA/2018.shtml#all_team_batting"
valuation_col <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="team_batting"]') %>%
html_table()
sea <- as.data.frame(valuation_col[1])
library(stringr)
View(sea)
getTeamLeaders <- function(year, stat, team){
url <- "https://www.baseball-reference.com/teams/"
url <- paste(url, as.character(team), "/")
return(url)
}
getTeamLeaders(2018, 'HR', 'SEA')
getTeamLeaders <- function(year, stat, team){
url <- "https://www.baseball-reference.com/teams/"
url <- paste(url, as.character(team), "/", sep = "")
return(url)
}
getTeamLeaders(2018, 'HR', 'SEA')
getTeamLeaders <- function(year, stat, team){
url <- "https://www.baseball-reference.com/teams/"
url <- paste(url, as.character(team), "/", as.character(year), ".shtml#all_team_batting", sep = "")
return(url)
}
getTeamLeaders(2018, 'HR', 'SEA')
View(sea)
cleanUpTeamLeaders <- function(db){
db <- filter(db, Rk != 'Rk')
db <- filter(db, !is.null(Rk))
}
cleanUpTeamLeaders(sea)
cleanUpTeamLeaders <- function(db){
db <- filter(db, Rk != 'Rk')
db <- filter(db, !is.null(Rk))
return(db)
}
sea <- cleanUpTeamLeaders(sea)
cleanUpTeamLeaders <- function(db){
db <- filter(db, Rk != 'Rk')
db <- db[1:(nrow(db)-4),]
return(db)
}
sea <- cleanUpTeamLeaders(sea)
url <- "https://www.baseball-reference.com/leagues/AL/2018-standard-batting.shtml"
valuation_col <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="all_players_standard_batting"]') %>%
html_table()
batters <- as.data.frame(valuation_col[1])
url <- "https://www.baseball-reference.com/leagues/AL/2018-standard-batting.shtml"
valuation_col <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="all_players_standard_batting"]/div[4]') %>%
html_table()
batters <- as.data.frame(valuation_col[1])
url <- "https://www.baseball-reference.com/leagues/AL/2018-standard-batting.shtml"
valuation_col <- url %>%
read_html() %>%
html_nodes(xpath='//*[@id="div_players_standard_batting"]') %>%
html_table()
batters <- as.data.frame(valuation_col[1])
View(sea)
max(sea$G)
min(sea$G)
sea$G
max(sea$G)
cleanUpTeamLeaders <- function(db){
db <- filter(db, Rk != 'Rk')
db <- db[1:(nrow(db)-4),]
for(i in c(1,4:28)){
db[,i] <- as.numeric(db[,i])
}
return(db)
}
cleanUpTeamLeaders(sea)
cleanUpTeamLeaders <- function(db){
db <- filter(db, Rk != 'Rk')
db <- db[1:(nrow(db)-4),]
for(i in c(1,4:28)){
for(j in 1:nrow(db))
db[j,i] <- as.numeric(db[j,i])
}
return(db)
}
cleanUpTeamLeaders(sea)
sea$G <- as.numeric(sea$G)
sea[,1] <- as.numeric(sea[,1])
cleanUpTeamLeaders <- function(db){
db <- filter(db, Rk != 'Rk')
db <- db[1:(nrow(db)-4),]
for(i in c(1,4:28)){
db[,i] <- as.numeric(db[,i])
}
return(db)
}
cleanUpTeamLeaders <- function(db){
db <- filter(db, Rk != 'Rk')
db <- db[1:(nrow(db)-4),]
for(i in 4:28){
db[,i] <- as.numeric(db[,i])
}
return(db)
}
cleanUpTeamLeaders(sea)
cleanUpTeamLeaders <- function(db){
db <- filter(db, Rk != 'Rk')
db <- db[1:(nrow(db)-4),]
for(i in c(1,4:28)){
db[,i] <- as.numeric(db[,i])
}
return(db)
}
sea <- cleanUpTeamLeaders(sea)
max(sea$G)
seaQ <- filter(sea, PA >= 3.1*G)
View(sea)
seaQ <- filter(sea, PA >= 3.1*max(G))
runApp()
runApp()
shiny::runApp()
#batting league leaders
output$alAVG <- renderDataTable(getLeagueLeaders('al', 2018, 'AVG'))
a<-getLeagueLeaders('al', 2018, 'AVG')
runApp()
